generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// generator zod {
//   provider              = "zod-prisma"
//   output                = "./zod"
//   relationModel         = default
//   prismaJsonNullability = true
// }

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model user {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          Role      @default(student)
  email         String    @unique
  emailVerified Boolean?  @default(false)
  Session       Session[]
  account       Account[]

  details student?
}

model student {
  applied_jobs student_enrollment[]
  offer        offer[]

  user          user?   @relation(fields: [userId], references: [id])
  userId        String  @unique
  studentRecord record?
}

model student_enrollment {
  createdAt DateTime    @default(now())
  result    EventResult @default(pending)

  event_id  String
  event     event    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student   student? @relation(fields: [studentId], references: [userId])
  studentId String

  @@unique([event_id, studentId])
}

model offer {
  id           String  @id @default(cuid())
  ctc          String
  offer_letter String  @unique
  studentId    String
  student      student @relation(fields: [studentId], references: [userId])
  event_id     String
  event        event   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model record {
  id                       String      @id @default(cuid())
  // ----
  name                     String
  usn                      String?     @unique
  branch                   Branch?
  gender                   Gender?
  email                    String      @unique
  image                    String?
  validated                Validation? @default(notvalidated)
  opted                    Opted?      @default(yes)
  // ----
  resume                   String?     @unique
  phoneNumber              String?     @unique
  parentsPhoneNumber       String?     @unique
  PermanentAddress         String?
  currentAddress           String?
  pinCode                  String?
  bloodGroup               String?
  panCardNumber            String?
  voterId                  String?
  adharCard                String?
  passportNumber           String?
  // SSLC
  sslcboard                Board?
  sslcscoreType            ScoreType?
  sslcscore                String?
  sslcmarksSheet           String?
  // PUC
  pucboard                 Board?
  pucscoreType             ScoreType?
  pucscore                 String?
  pucmarksSheet            String?
  // grauduation
  graduationSem1score      String?
  graduationSem1MarksSheet String?
  graduationSem2score      String?
  graduationSem2MarksSheet String?
  graduationSem3score      String?
  graduationSem3MarksSheet String?
  graduationSem4score      String?
  graduationSem4MarksSheet String?
  graduationSem5score      String?
  graduationSem5MarksSheet String?
  graduationSem6score      String?
  graduationSem6MarksSheet String?
  graduationSem7score      String?
  graduationSem7MarksSheet String?
  graduationSem8score      String?
  graduationSem8MarksSheet String?
  // diploma
  diplomaSems1score        String?
  diplomaSems1MarksSheet   String?
  diplomaSems2score        String?
  diplomaSems2MarksSheet   String?
  diplomaSems3score        String?
  diplomaSems3MarksSheet   String?
  diplomaSems4score        String?
  diplomaSems4MarksSheet   String?
  diplomaSems5score        String?
  diplomaSems5MarksSheet   String?
  diplomaSems6score        String?
  diplomaSems6MarksSheet   String?

  student   student? @relation(fields: [studentId], references: [userId])
  studentId String   @unique
}

model company {
  id     String  @id @default(cuid())
  name   String  @unique
  sector String
  events event[]

  @@fulltext([name])
}

model event {
  id                    String               @id @default(cuid())
  createdAt             DateTime             @default(now())
  title                 String
  ctc                   String
  type                  String
  status                Status               @default(Open)
  eligibilityOfferCount EligibiltyOfferCount

  branches_allowed      branch[]
  offers     offer[]
  company_id String
  company    company              @relation(fields: [company_id], references: [id])
  students   student_enrollment[]
}

model branch {
  name    Branch
  event   event  @relation(fields: [eventId], references: [id])
  eventId String
  @@id([name,eventId])
}

enum Board {
  ICSE
  CBSE
  STATE
  INTERNATIONAL
}

enum ScoreType {
  CGPA
  Percentage
}

enum Validation {
  notvalidated
  pending
  validated
}

enum Opted {
  yes
  no
}

enum Status {
  Open
  Close
}

enum Role {
  student
  admin
}

enum Gender {
  Male
  Female
  Other
}

enum EligibiltyOfferCount {
  zero
  atmost1
  atmost2
  openforall
}

enum EventResult {
  pending
  rejected
  placed
}

enum Branch {
  CSE
  ISE
  EC
  EEE
  CV
  ME
  AIML
}
