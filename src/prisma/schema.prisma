generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// TODO : uncomment when this @link https://github.com/CarterGrimmeisen/zod-prisma/pull/122 gets merged
// until then uncoment the below lines when you make schema changes and run 
// `npx prisma db push` and comment them back again 

// generator zod {
//   provider              = "zod-prisma"
//   output                = "./zod"
//   relationModel         = default
//   prismaJsonNullability = true
// }

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model user {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          Role      @default(student)
  email         String    @unique
  emailVerified Boolean?  @default(false)
  Session       Session[]
  account       Account[]

  appliedJobs studentEnrollment[]
  offer        offer[]
  studentRecord record?
}


model studentEnrollment {
  createdAt DateTime    @default(now())
  result    EventResult @default(pending)

  eventId  String
  event     event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student   user? @relation(fields: [studentId], references: [id])
  studentId String

  @@unique([eventId, studentId])
}

model offer {
  id           String  @id @default(cuid())
  ctc          String
  offerLetter Json // {"file: "", "url": ""}
  studentId    String
  student      user @relation(fields: [studentId], references: [id])
  eventId     String
  event        event   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model record {
  id                       String      @id @default(cuid())
  // ----
  name                     String
  usn                      String     @unique
  branch                   Branch
  gender                   Gender
  personalEmail            String      @unique
  image                    String?
  validated                Validation? @default(notvalidated)
  opted                    Opted?      @default(yes)
  // ----
  resume                   String?     @unique
  phoneNumber              String?     @unique
  parentsPhoneNumber       String?     @unique
  PermanentAddress         String?
  currentAddress           String?
  pinCode                  String?
  bloodGroup               String?
  panCardNumber            String?
  voterId                  String?
  adharCard                String?
  passportNumber           String?
  // SSLC
  sslcboard                Board?
  sslcscoreType            ScoreType?
  sslcscore                String?
  sslcmarksSheet           Json?   // {"file: "", "url": ""}
  // PUC
  pucboard                 Board?
  pucscoreType             ScoreType?
  pucscore                 String?
  pucmarksSheet            Json? // {"file: "", "url": ""}
  // grauduation
  graduationSem1 Json? // {score: "", "file: "", "url": ""}
  graduationSem2 Json? // {score: "", "file: "", "url": ""}
  graduationSem3 Json? // {score: "", "file: "", "url": ""}
  graduationSem4 Json? // {score: "", "file: "", "url": ""}
  graduationSem5 Json? // {score: "", "file: "", "url": ""}
  graduationSem6 Json? // {score: "", "file: "", "url": ""}
  graduationSem7 Json? // {score: "", "file: "", "url": ""}
  graduationSem8 Json? // {score: "", "file: "", "url": ""}
  // diploma
  diplomaSem1   Json? // {score:"", "file: "", "url": ""}
  diplomaSem2   Json? // {score:"", "file: "", "url": ""}
  diplomaSem3   Json? // {score:"", "file: "", "url": ""}
  diplomaSem4   Json? // {score:"", "file: "", "url": ""}
  diplomaSem5   Json? // {score:"", "file: "", "url": ""}
  diplomaSem6   Json? // {score:"", "file: "", "url": ""}

  student   user? @relation(fields: [studentId], references: [id])
  studentId String   @unique
}

model company {
  id     String  @id @default(cuid())
  name   String  @unique
  sector String
  events event[]

  @@fulltext([name])
}

model event {
  id                    String               @id @default(cuid())
  createdAt             DateTime             @default(now())
  title                 String
  ctc                   String
  type                  String
  status                Status               @default(Open)
  eligibilityOfferCount EligibiltyOfferCount

  branchesAllowed      branch[]
  offers     offer[]
  companyId String
  company    company              @relation(fields: [companyId], references: [id])
  students   studentEnrollment[]
}

model branch {
  name    Branch
  event   event  @relation(fields: [eventId], references: [id],onDelete: Cascade)
  eventId String
  @@id([name,eventId])
}

enum Board {
  ICSE
  CBSE
  STATE
  INTERNATIONAL
}

enum ScoreType {
  CGPA
  Percentage
}

enum Validation {
  notvalidated
  pending
  validated
}

enum Opted {
  yes
  no
}

enum Status {
  Open
  Close
}

enum Role {
  student
  admin
}

enum Gender {
  Male
  Female
  Other
}

enum EligibiltyOfferCount {
  zero
  atmost1
  atmost2
  openforall
}

enum EventResult {
  pending
  rejected
  placed
}

enum Branch {
  CSE
  ISE
  EC
  EEE
  CV
  ME
  AIML
}
