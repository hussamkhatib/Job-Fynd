generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model student {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  name      String
  email     String     @unique
  phone     String     @unique
  usn       String     @unique
  branch    String
  resume    String     @unique
  opted     Opted      @default(yes)
  validated Validation @default(notvalidated)

  offers       offer[]
  applied_jobs student_enrollment[]
}

model student_enrollment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  student_id Int
  student    student @relation(fields: [student_id], references: [id])
  event_id   Int
  event      event   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  @@unique([event_id, student_id])
}

model event {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  title            String
  ctc              String
  type             String
  status           Status   @default(Open)
  branches_allowed Json

  offers     offer[]
  company_id Int
  company    company              @relation(fields: [company_id], references: [id])
  students   student_enrollment[]
}

model company {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  sector String
  events event[]

  @@fulltext([name])
}

model offer {
  id           Int     @id @default(autoincrement())
  ctc          String
  offer_letter String  @unique
  student_id   Int
  student      student @relation(fields: [student_id], references: [id])
  event_id     Int
  event        event   @relation(fields: [event_id], references: [id], onDelete: Cascade)
}

enum Validation {
  notvalidated
  pending
  validated
}

enum Opted {
  yes
  no
}

enum Status {
  Open
  Close
}
