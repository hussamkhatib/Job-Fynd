generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model user {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          Role      @default(student)
  email         String?   @unique
  name          String
  image         String
  emailVerified Boolean?  @default(false)
  Session       Session[]
  account       Account[]

  phone     String?     @unique
  usn       String?     @unique
  branch    String?
  resume    String?     @unique
  opted     Opted?      @default(yes)
  validated Validation? @default(notvalidated)

  offers       offer[]
  applied_jobs student_enrollment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model student_enrollment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  student_email String
  student       user   @relation(fields: [student_email], references: [email])
  event_id      Int
  event         event  @relation(fields: [event_id], references: [id], onDelete: Cascade)
  @@unique([event_id, student_email])
}

model event {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  title            String
  ctc              String
  type             String
  status           Status   @default(Open)
  branches_allowed Json

  offers     offer[]
  company_id Int
  company    company              @relation(fields: [company_id], references: [id])
  students   student_enrollment[]
}

model company {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  sector String
  events event[]

  @@fulltext([name])
}

model offer {
  id           Int    @id @default(autoincrement())
  ctc          String
  offer_letter String @unique
  student_id   String
  student      user   @relation(fields: [student_id], references: [id])
  event_id     Int
  event        event  @relation(fields: [event_id], references: [id], onDelete: Cascade)
}

enum Validation {
  notvalidated
  pending
  validated
}

enum Opted {
  yes
  no
}

enum Status {
  Open
  Close
}

enum Role {
  student
  admin
}
