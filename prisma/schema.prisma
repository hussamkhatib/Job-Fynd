generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model user {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          Role      @default(student)
  email         String?   @unique
  emailVerified Boolean?  @default(false)
  Session       Session[]
  account       Account[]

  details student?
}

model student {
  id        String      @id @default(cuid())
  name      String
  usn       String?     @unique
  branch    String?
  gender    String?
  email     String
  validated Validation? @default(notvalidated)

  applied_jobs student_enrollment[]

  opted              Opted?  @default(yes)
  image              String
  phoneNumber        String? @unique
  parentsPhoneNumber String? @unique
  PermanentAddress   String?
  currentAddress     String?
  pinCode            String?
  bloodGroup         String?
  panCardNumber      String?
  voterId            String?
  adharCard          String?
  passportNumber     String?
  Record             record?
  recordId           String?
  user               user?   @relation(fields: [userId], references: [id])
  userId             String  @unique
  offer              offer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model student_enrollment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  event_id     Int
  event        event    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student      student? @relation(fields: [studentEmail], references: [email])
  studentEmail String?
  @@unique([event_id, studentEmail])
}

model event {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  title            String
  ctc              String
  type             String
  status           Status   @default(Open)
  branches_allowed Json

  offers     offer[]
  company_id Int
  company    company              @relation(fields: [company_id], references: [id])
  students   student_enrollment[]
}

model company {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  sector String
  events event[]

  @@fulltext([name])
}

model offer {
  id           Int     @id @default(autoincrement())
  ctc          String
  offer_letter String  @unique
  student_usn  String
  student      student @relation(fields: [student_usn], references: [usn])
  event_id     Int
  event        event   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Validation {
  notvalidated
  pending
  validated
}

enum Opted {
  yes
  no
}

enum Status {
  Open
  Close
}

enum Role {
  student
  admin
}

model record {
  id     String @id @default(cuid())
  tenth  Json
  puc    Json
  resume String @unique

  graduation   graduation?
  diploma      diploma?
  graduationId String
  diplomaId    String
  student      student     @relation(fields: [studentId], references: [id])
  studentId    String      @unique
}

model graduation {
  id       String @id @default(cuid())
  sem1     Json?
  sem2     Json?
  sem3     Json?
  sem4     Json?
  sem5     Json?
  sem6     Json?
  sem7     Json?
  sem8     Json?
  record   record @relation(fields: [recordId], references: [id])
  recordId String @unique
}

model diploma {
  id       String @id @default(cuid())
  sem1     Json?
  sem2     Json?
  sem3     Json?
  sem4     Json?
  sem5     Json?
  sem6     Json?
  record   record @relation(fields: [recordId], references: [id])
  recordId String @unique
}
