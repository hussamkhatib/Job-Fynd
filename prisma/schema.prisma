generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model user {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          Role      @default(student)
  email         String    @unique
  emailVerified Boolean?  @default(false)
  Session       Session[]
  account       Account[]

  details student?
}

model student {
  id        String      @id @default(cuid())
  name      String
  usn       String?     @unique
  branch    String?
  gender    Gender?
  email     String      @unique
  image     String?
  validated Validation? @default(notvalidated)
  opted     Opted?      @default(yes)

  applied_jobs student_enrollment[]
  offer        offer[]

  user          user?   @relation(fields: [userId], references: [id])
  userId        String  @unique
  studentRecord record?
}

model student_enrollment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  event_id     Int
  event        event    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student      student? @relation(fields: [studentEmail], references: [email])
  studentEmail String?
  @@unique([event_id, studentEmail])
}

model offer {
  id           Int     @id @default(autoincrement())
  ctc          String
  offer_letter String  @unique
  studentEmail String
  student      student @relation(fields: [studentEmail], references: [email])
  event_id     Int
  event        event   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model record {
  id                 String  @id @default(cuid())
  resume             String? @unique
  phoneNumber        String? @unique
  parentsPhoneNumber String? @unique
  PermanentAddress   String?
  currentAddress     String?
  pinCode            String?
  bloodGroup         String?
  panCardNumber      String?
  voterId            String?
  adharCard          String?
  passportNumber     String?

  graduation   graduation?
  diploma      diploma?
  student      student?    @relation(fields: [studentEmail], references: [email])
  studentEmail String      @unique
  puc          Sslcpuc?    @relation(name: "puc")
  sslc         Sslcpuc?
}

model Sslcpuc {
  id           String     @id @default(cuid())
  board        Board?
  scoreType    ScoreType?
  score        String?
  marksSheet   String?
  puc          record?    @relation(fields: [sslcrecordId], references: [studentEmail])
  sslc         record?    @relation(name: "puc", fields: [pucRecordId], references: [studentEmail])
  pucRecordId  String?    @unique
  sslcrecordId String?    @unique
}

model graduation {
  id             String  @id @default(cuid())
  sem1           String?
  sem1MarksSheet String?
  sem2           String?
  sem2MarksSheet String?
  sem3           String?
  sem3MarksSheet String?
  sem4           String?
  sem4MarksSheet String?
  sem5           String?
  sem5MarksSheet String?
  sem6           String?
  sem6MarksSheet String?
  sem7           String?
  sem7MarksSheet String?
  sem8           String?
  sem8MarksSheet String?
  record         record  @relation(fields: [recordId], references: [studentEmail])
  recordId       String  @unique
}

model diploma {
  id             String  @id @default(cuid())
  sem1           String?
  sem1MarksSheet String?
  sem2           String?
  sem2MarksSheet String?
  sem3           String?
  sem3MarksSheet String?
  sem4           String?
  sem4MarksSheet String?
  sem5           String?
  sem5MarksSheet String?
  sem6           String?
  sem6MarksSheet String?
  record         record? @relation(fields: [recordId], references: [studentEmail])
  recordId       String  @unique
}

model company {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  sector String
  events event[]

  @@fulltext([name])
}

model event {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  title            String
  ctc              String
  type             String
  status           Status   @default(Open)
  branches_allowed Json

  offers     offer[]
  company_id Int
  company    company              @relation(fields: [company_id], references: [id])
  students   student_enrollment[]
}

enum Board {
  ICSE
  CBSE
  STATE
  INTERNATIONAL
}

enum ScoreType {
  CGPA
  Percentage
}

enum Validation {
  notvalidated
  pending
  validated
}

enum Opted {
  yes
  no
}

enum Status {
  Open
  Close
}

enum Role {
  student
  admin
}

enum Gender {
  Male
  Female
  Other
}
